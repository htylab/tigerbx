name: Compile9

on:
  workflow_dispatch:

permissions:
  contents: write      # 建立 Release 需要

jobs:
# ============================================================
# 1. Build ── 針對三大 OS 編譯並產生「單檔 zip」
# ============================================================
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        py: ['tiger']          # 主要執行入口 (tiger.py)
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Derive short commit SHA
      shell: bash
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_ENV"

    # ── 這一步只在 macOS Runner 執行 ──────────────────────
    - name: Disable macOS wheel compatibility check
      if: runner.os == 'macOS'
      run: echo "SYSTEM_VERSION_COMPAT=0" >> "$GITHUB_ENV"

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install pyinstaller onnxruntime

    - name: PyInstaller
      shell: bash
      run: |
        pyinstaller -c -p ./tigerbx \
          --additional-hooks-dir=./pyinstaller_hooks \
          --icon=./tigerbx/exe/ico.ico \
          -F ./tigerbx/${{ matrix.py }}.py

    # ── 重新命名與壓縮（zip 內只有執行檔本身） ──
    - name: Package binary into zip
      shell: bash
      run: |
        mkdir out
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          BIN_SRC="dist/tiger.exe"
          BIN_NAME="tiger.exe"
          ZIP_NAME="tiger-windows-${SHORT_SHA}.zip"
          powershell -Command "Compress-Archive -Path $BIN_SRC -DestinationPath out/$ZIP_NAME"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          BIN_SRC="dist/tiger"
          BIN_NAME="tiger"
          ZIP_NAME="tiger-macos-${SHORT_SHA}.zip"
          zip -j "out/$ZIP_NAME" "$BIN_SRC"
        else   # Linux
          BIN_SRC="dist/tiger"
          BIN_NAME="tiger"
          ZIP_NAME="tiger-linux-${SHORT_SHA}.zip"
          zip -j "out/$ZIP_NAME" "$BIN_SRC"
        fi
        echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

    - name: Upload zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_NAME }}      # artifact 名就是 zip 檔名
        path: out/${{ env.ZIP_NAME }}

# ============================================================
# 2. Release ── 直接發布三顆 zip
# ============================================================
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true        # 把三顆 zip 平鋪到 artifacts/
        path: artifacts

    - name: List downloaded files
      run: ls -lh artifacts

    - name: Create draft GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        draft: true
        artifacts: artifacts/tiger-*.zip
        token: ${{ secrets.GITHUB_TOKEN }}
